{"version":3,"file":"static/js/184.df4f7918.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","sections/auth/RegisterForm.js","pages/auth/Register.js"],"sourcesContent":["import PropTypes from \"prop-types\";\n// form\nimport { FormProvider as Form } from \"react-hook-form\";\n\n// ----------------------------------------------------------------------\n\nFormProvider.propTypes = {\n  children: PropTypes.node,\n  methods: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nexport default function FormProvider({ children, onSubmit, methods }) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n","import PropTypes from \"prop-types\";\n// form\nimport { useFormContext, Controller } from \"react-hook-form\";\n// @mui\nimport { TextField } from \"@mui/material\";\n\nRHFTextField.propTypes = {\n  name: PropTypes.string,\n  helperText: PropTypes.node,\n};\n\nexport default function RHFTextField({ name, helperText, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <TextField\n          {...field}\n          fullWidth\n          value={\n            typeof field.value === \"number\" && field.value === 0\n              ? \"\"\n              : field.value\n          }\n          error={!!error}\n          helperText={error ? error?.message : helperText}\n          {...other}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport * as Yup from \"yup\";\n// form\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n// @mui\nimport {\n  Stack,\n  Alert,\n  IconButton,\n  InputAdornment,\n  Button,\n} from \"@mui/material\";\n\n// components\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\nimport { Eye, EyeSlash } from \"phosphor-react\";\nimport { RegisterUser } from \"../../redux/slices/auth\";\nimport { useDispatch, useSelector } from \"react-redux\";\nconst RegisterForm = () => {\n  const { isLoading } = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().required(\"First name required\"),\n    lastName: Yup.string().required(\"Last name required\"),\n    email: Yup.string()\n      .required(\"Email is required\")\n      .email(\"Email must be a valid email address\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n  const defaultValues = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"user@talki.com\",\n    password: \"password\",\n    image: null,\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(RegisterSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    setError,\n    handleSubmit,\n    formState: { errors },\n  } = methods;\n\n  const onSubmit = async (data) => {\n    try {\n      // Submit data to backend by dispatching the RegisterUser action\n      await dispatch(RegisterUser(data));\n      // Redirect to the login page after successful registration\n      window.location.href = \"/login\";\n    } catch (error) {\n      console.error(error);\n      // If there's an error, set the error message without redirecting\n      reset();\n      setError(\"afterSubmit\", {\n        type: \"server\",\n        message:\n          error.response.data.message ||\n          \"Something went wrong. Please try again.\",\n      });\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={2} mb={2}>\n        {!!errors.afterSubmit && (\n          <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\n        )}\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n          <RHFTextField name=\"firstName\" label=\"First name\" />\n          <RHFTextField name=\"lastName\" label=\"Last name\" />\n        </Stack>\n        <RHFTextField name=\"email\" label=\"Email address\" />\n        <RHFTextField\n          name=\"password\"\n          label=\"Password\"\n          type={showPassword ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={() => setShowPassword(!showPassword)}\n                  edge=\"end\"\n                >\n                  {showPassword ? <Eye /> : <EyeSlash />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />{\" \"}\n        <Button\n          fullWidth\n          color=\"inherit\"\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isLoading}\n          sx={{\n            bgcolor: \"text.primary\",\n            color: (theme) =>\n              theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\n            \"&:hover\": {\n              bgcolor: \"text.primary\",\n              color: (theme) =>\n                theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\n            },\n          }}\n        >\n          Create Account\n        </Button>\n      </Stack>\n    </FormProvider>\n  );\n};\n\nexport default RegisterForm;\n","import { Link, Stack, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport RegisterForm from \"../../sections/auth/RegisterForm\";\n\nconst Register = () => {\n  return (\n    <>\n      <Stack spacing={1} sx={{ mb: 2, position: \"relative\" ,maxHeight:'100vh' }}>\n        <Typography variant=\"h4\">Get started with Talki</Typography>\n        <Stack direction=\"row\" spacing={0.5}>\n          <Typography variant=\"body2\"> Already have an account? </Typography>\n          <Link component={RouterLink} to={\"/auth/login\"} variant=\"subtitle2\">\n            Sign in\n          </Link>\n        </Stack>\n      </Stack>\n      {/* Form */}\n      {<RegisterForm />}\n\n      <Typography\n        component=\"div\"\n        sx={{\n          color: \"text.secondary\",\n          mt: 3,\n          typography: \"caption\",\n          textAlign: \"center\",\n        }}\n      >\n        {\"By signing up, I agree to \"}\n        <Link underline=\"always\" color=\"text.primary\">\n          Terms of Service\n        </Link>\n        {\" and \"}\n        <Link underline=\"always\" color=\"text.primary\">\n          Privacy Policy\n        </Link>\n        .\n      </Typography>\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["FormProvider","children","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","fieldState","error","fullWidth","value","message","isLoading","useSelector","state","auth","dispatch","useDispatch","showPassword","setShowPassword","useState","RegisterSchema","Yup","shape","firstName","required","lastName","email","password","useForm","resolver","yupResolver","defaultValues","image","reset","setError","handleSubmit","formState","errors","async","RegisterUser","data","window","location","href","console","type","response","Stack","spacing","mb","afterSubmit","Alert","severity","direction","xs","sm","label","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Button","color","size","variant","loading","sx","bgcolor","theme","palette","mode","maxHeight","Typography","Link","component","RouterLink","to","mt","typography","textAlign","underline"],"sourceRoot":""}