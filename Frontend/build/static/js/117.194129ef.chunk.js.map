{"version":3,"file":"static/js/117.194129ef.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","sections/auth/LoginForm.js","pages/auth/Login.js"],"sourcesContent":["import PropTypes from \"prop-types\";\n// form\nimport { FormProvider as Form } from \"react-hook-form\";\n\n// ----------------------------------------------------------------------\n\nFormProvider.propTypes = {\n  children: PropTypes.node,\n  methods: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nexport default function FormProvider({ children, onSubmit, methods }) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n","import PropTypes from \"prop-types\";\n// form\nimport { useFormContext, Controller } from \"react-hook-form\";\n// @mui\nimport { TextField } from \"@mui/material\";\n\nRHFTextField.propTypes = {\n  name: PropTypes.string,\n  helperText: PropTypes.node,\n};\n\nexport default function RHFTextField({ name, helperText, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <TextField\n          {...field}\n          fullWidth\n          value={\n            typeof field.value === \"number\" && field.value === 0\n              ? \"\"\n              : field.value\n          }\n          error={!!error}\n          helperText={error ? error?.message : helperText}\n          {...other}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport FormProvider from \"../../components/hook-form/FormProvider\";\nimport {\n  Alert,\n  Button,\n  IconButton,\n  InputAdornment,\n  Link,\n  Stack,\n} from \"@mui/material\";\nimport { RHFTextField } from \"../../components/hook-form\";\nimport { Eye, EyeSlash } from \"phosphor-react\";\nimport { LoginUser } from \"../../redux/slices/auth\";\nimport { useDispatch } from \"react-redux\";\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .required(\"Email is required\")\n      .email(\"Email must be a valid email address\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n  const defaultValues = {\n    email: \"user@talki.com\",\n    password: \"password\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(LoginSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    setError,\n    handleSubmit,\n    formState: { errors },\n  } = methods;\n\n  const onSubmit = (data) => {\n    try {\n      // submit data to backend\n      dispatch(LoginUser(data));\n    } catch (error) {\n      console.error(error);\n      reset();\n      setError(\"afterSubmit\", {\n        ...error,\n        message: error.message,\n      });\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        {!!errors.afterSubmit && (\n          <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\n        )}\n\n        <RHFTextField name=\"email\" label=\"Email address\" />\n\n        <RHFTextField\n          name=\"password\"\n          label=\"Password\"\n          type={showPassword ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={() => setShowPassword(!showPassword)}\n                  edge=\"end\"\n                >\n                  {showPassword ? <Eye /> : <EyeSlash />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Stack>\n      <Stack alignItems=\"flex-end\" sx={{ my: 2 }}>\n        <Link\n          component={RouterLink}\n          to=\"/auth/reset-password\"\n          variant=\"body2\"\n          color=\"inherit\"\n          underline=\"always\"\n        >\n          Forgot password?\n        </Link>\n      </Stack>\n      <Button\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{\n          bgcolor: \"text.primary\",\n          color: (theme) =>\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\n          \"&:hover\": {\n            bgcolor: \"text.primary\",\n            color: (theme) =>\n              theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\n          },\n        }}\n      >\n        Login\n      </Button>\n    </FormProvider>\n  );\n};\n\nexport default LoginForm;\n","import { Link as RouterLink } from \"react-router-dom\";\n// sections\nimport { Stack, Typography, Link } from \"@mui/material\";\nimport Login from \"../../sections/auth/LoginForm\";\n\n// ----------------------------------------------------------------------\n\nexport default function LoginPage() {\n  return (\n    <>\n      <Stack spacing={2} sx={{ mb: 5, position: \"relative\" }}>\n        <Typography variant=\"h4\">Login to your account</Typography>\n\n        <Stack direction=\"row\" spacing={0.5}>\n          <Typography variant=\"body2\">New user?</Typography>\n\n          <Link\n            to={\"/auth/register\"}\n            component={RouterLink}\n            variant=\"subtitle2\"\n          >\n            Create an account\n          </Link>\n        </Stack>\n      </Stack>\n      {/* Form */}\n      <Login />\n    </>\n  );\n}\n"],"names":["FormProvider","children","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","fieldState","error","fullWidth","value","message","dispatch","useDispatch","showPassword","setShowPassword","useState","LoginSchema","Yup","shape","email","required","password","useForm","resolver","yupResolver","defaultValues","reset","setError","handleSubmit","formState","errors","data","LoginUser","console","Stack","spacing","afterSubmit","Alert","severity","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","alignItems","sx","my","Link","component","RouterLink","to","variant","color","underline","Button","size","bgcolor","theme","palette","mode","LoginPage","mb","Typography","direction"],"sourceRoot":""}