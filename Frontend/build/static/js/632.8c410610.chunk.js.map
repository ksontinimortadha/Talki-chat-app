{"version":3,"file":"static/js/632.8c410610.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","sections/settings/ProfileForm.js","pages/dashboard/Profile.js"],"sourcesContent":["import PropTypes from \"prop-types\";\n// form\nimport { FormProvider as Form } from \"react-hook-form\";\n\n// ----------------------------------------------------------------------\n\nFormProvider.propTypes = {\n  children: PropTypes.node,\n  methods: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nexport default function FormProvider({ children, onSubmit, methods }) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n","import PropTypes from \"prop-types\";\n// form\nimport { useFormContext, Controller } from \"react-hook-form\";\n// @mui\nimport { TextField } from \"@mui/material\";\n\nRHFTextField.propTypes = {\n  name: PropTypes.string,\n  helperText: PropTypes.node,\n};\n\nexport default function RHFTextField({ name, helperText, ...other }) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <TextField\n          {...field}\n          fullWidth\n          value={\n            typeof field.value === \"number\" && field.value === 0\n              ? \"\"\n              : field.value\n          }\n          error={!!error}\n          helperText={error ? error?.message : helperText}\n          {...other}\n        />\n      )}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport FormProvider from \"../../components/hook-form/FormProvider\";\nimport { Button, Stack } from \"@mui/material\";\nimport { RHFTextField } from \"../../components/hook-form\";\nimport { useSelector } from \"react-redux\";\n\nconst ProfileForm = () => {\n  const { user } = useSelector((state) => state.app);\n  const [setError] = useState(null);\n\n  const ProfileSchema = Yup.object().shape({\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    about: Yup.string().required(\"About is required\"),\n    avatarUrl: Yup.string().required(\"Avatar is required\").nullable(true),\n  });\n\n  const defaultValues = {\n    firstName: user?.firstName,\n    lastName: user?.lastName,\n    about: \"\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(ProfileSchema),\n    defaultValues,\n  });\n\n  const { reset, handleSubmit } = methods;\n\n  const onSubmit = (data) => {\n    try {\n      console.log(data);\n      // submit data to backend\n      console.log(\"Data\", data);\n    } catch (error) {\n      console.error(error);\n      reset();\n      setError(\"afterSubmit\", {\n        ...error,\n        message: error.message,\n      });\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <Stack spacing={3}>\n          <RHFTextField\n            helperText={\"This name is visible to your contacts\"}\n            name=\"firstName\"\n            label=\"First Name\"\n          />\n          <RHFTextField\n            helperText={\"This name is visible to your contacts\"}\n            name=\"lastName\"\n            label=\"Last Name\"\n          />\n          <RHFTextField multiline rows={3} name=\"about\" label=\"About\" />\n        </Stack>\n        <Stack direction={\"row\"} justifyContent=\"end\">\n          <Button\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n            variant=\"outlined\"\n            // loading={isSubmitSuccessful || isSubmitting}\n          >\n            Save\n          </Button>\n        </Stack>\n      </Stack>\n    </FormProvider>\n  );\n};\n\nexport default ProfileForm;\n","import { Box, Stack, Typography } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport ProfileForm from \"../../sections/settings/ProfileForm\";\nimport { useDispatch } from \"react-redux\";\nimport { FetchUserProfile } from \"../../redux/slices/app\";\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(FetchUserProfile());\n  }, [dispatch]);\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ width: \"100%\" }}>\n        <Box\n          sx={{\n            overflowY: \"scroll\",\n            height: \"100vh\",\n            width: 320,\n            backgroundColor: (theme) =>\n              theme.palette.mode === \"light\"\n                ? \"#F8FAFF\"\n                : theme.palette.background,\n            boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n          }}\n        >\n          <Stack p={4} spacing={5}>\n            {/* Header */}\n            <Stack direction=\"row\" alignItems={\"center\"} spacing={3}>\n              <Typography variant=\"h5\">Profile</Typography>\n            </Stack>\n            {/* Profile Edit Form */}\n            <ProfileForm />\n          </Stack>\n        </Box>\n        {/* Right Panel */}\n        <Box\n          sx={{\n            height: \"100%\",\n            width: \"calc(100vw - 420px )\",\n            backgroundColor: (theme) =>\n              theme.palette.mode === \"light\"\n                ? \"#FFF\"\n                : theme.palette.background.paper,\n            borderBottom: \"6px solid #0162C4\",\n          }}\n        ></Box>\n      </Stack>\n    </>\n  );\n};\n\nexport default Profile;\n"],"names":["FormProvider","children","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","fieldState","error","fullWidth","value","message","user","useSelector","state","app","setError","useState","ProfileSchema","Yup","shape","firstName","required","lastName","about","avatarUrl","nullable","defaultValues","useForm","resolver","yupResolver","reset","handleSubmit","data","console","log","Stack","spacing","label","multiline","rows","direction","justifyContent","Button","color","size","type","variant","dispatch","useDispatch","useEffect","FetchUserProfile","sx","width","Box","overflowY","height","backgroundColor","theme","palette","mode","background","boxShadow","p","alignItems","Typography","paper","borderBottom"],"sourceRoot":""}